generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Setup {
  id        Int     @id @default(1)
  step      Int     @default(1)
  completed Boolean @default(false)
}

model Media {
  id           String      @id @default(cuid())
  name         String
  url          String
  thumbnailUrl String
  width        Int
  height       Int
  size         Int
  format       String
  extension    String
  // DateTime
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @default(now()) @updatedAt
  // Avatars
  user         User[]      @relation("UserAvatar")
  // Maps
  maps         Map[]       @relation("MapMedia")
  // Characters
  characters   Character[] @relation("CharacterMedia")
  // Created by
  createdBy    User        @relation("UserMedia", fields: [createdById], references: [id])
  createdById  String
}

model User {
  id                      String                   @id @default(cuid())
  name                    String
  displayName             String
  email                   String                   @unique
  emailVerified           Boolean                  @default(false)
  password                String
  // Avatar
  avatar                  Media?                   @relation("UserAvatar", fields: [avatarId], references: [id])
  avatarId                String?
  // Order of user campaigns
  campaignOrder           String[]                 @default([])
  // DateTime
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @default(now()) @updatedAt
  // Refresh Tokens
  refreshTokens           RefreshToken[]           @relation("UserRefreshTokens")
  // Maps
  maps                    Map[]                    @relation("UserMaps")
  // Tokens
  tokens                  Token[]                  @relation("UserTokens")
  // Media
  media                   Media[]                  @relation("UserMedia")
  // Campaigns
  campaignsCreated        Campaign[]               @relation("UserCampaigns")
  campaignsMember         CampaignMember[]         @relation("UserCampaignsMember")
  // Characters
  createdCharacters       Character[]              @relation("CreatedCharacters")
  controlledCharacters    Character[]              @relation("ControlledCharacters")
  // Generic tokens
  emailVerificationTokens EmailVerificationToken[] @relation("UserEmailVerificationTokens")
  passwordResetTokens     PasswordResetToken[]     @relation("UserPasswordResetTokens")
  campaignInvites         CampaignInvite[]         @relation("UserCampaignInvites")
}

model RefreshToken {
  id        String   @id @default(cuid())
  value     String   @unique
  // DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  // User
  user      User     @relation("UserRefreshTokens", fields: [userId], references: [id])
  userId    String
}

model EmailVerificationToken {
  id        String   @id @default(cuid())
  value     String   @unique
  // DateTime
  createdAt DateTime @default(now())
  // User
  user      User     @relation("UserEmailVerificationTokens", fields: [userId], references: [id])
  userId    String
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  value     String   @unique
  // DateTime
  createdAt DateTime @default(now())
  // User
  user      User     @relation("UserPasswordResetTokens", fields: [userId], references: [id])
  userId    String
}

model CampaignInvite {
  id         String   @id @default(cuid())
  email      String
  value      String   @unique
  // DateTime
  createdAt  DateTime @default(now())
  // User
  user       User?    @relation("UserCampaignInvites", fields: [userId], references: [id])
  userId     String?
  // Campaign
  campaign   Campaign @relation("CampaignInvites", fields: [campaignId], references: [id])
  campaignId String
}

model Campaign {
  id          String           @id @default(cuid())
  name        String
  // DateTime
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @default(now()) @updatedAt
  // Maps
  maps        Map[]            @relation("CampaignMaps")
  // Members
  members     CampaignMember[] @relation("CampaignMembers")
  // Characters
  characters  Character[]      @relation("CampaignCharacters")
  // Created by
  createdBy   User             @relation("UserCampaigns", fields: [createdById], references: [id])
  createdById String
  // Invites
  invites     CampaignInvite[] @relation("CampaignInvites")
}

enum CampaignMemberRole {
  GAME_MASTER
  PLAYER
}

model CampaignMember {
  id         String             @id @default(cuid())
  role       CampaignMemberRole @default(PLAYER)
  // User
  user       User               @relation("UserCampaignsMember", fields: [userId], references: [id])
  userId     String
  // Campaign
  campaign   Campaign           @relation("CampaignMembers", fields: [campaignId], references: [id])
  campaignId String
  // DateTime
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @default(now()) @updatedAt
}

model Map {
  id              String   @id @default(cuid())
  name            String
  // Order
  order           Int?     @default(autoincrement())
  // DateTime
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now()) @updatedAt
  // Tokens
  tokens          Token[]  @relation("MapTokens")
  // Media
  media           Media[]  @relation("MapMedia")
  selectedMediaId String?
  // Campaign
  campaign        Campaign @relation("CampaignMaps", fields: [campaignId], references: [id])
  campaignId      String
  // Created by
  createdBy       User     @relation("UserMaps", fields: [createdById], references: [id])
  createdById     String
}

model Character {
  id              String   @id @default(cuid())
  name            String
  // DateTime
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now()) @updatedAt
  // Tokens
  tokens          Token[]  @relation("CharacterTokens")
  // Media
  media           Media[]  @relation("CharacterMedia")
  selectedMediaId String?
  // Created by
  createdBy       User     @relation("CreatedCharacters", fields: [createdById], references: [id])
  createdById     String
  // Controlled by
  controlledBy    User[]   @relation("ControlledCharacters")
  // Campaign
  campaign        Campaign @relation("CampaignCharacters", fields: [campaignId], references: [id])
  campaignId      String
}

model Token {
  id          String    @id @default(cuid())
  width       Int
  height      Int
  x           Int
  y           Int
  // DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  // User
  createdBy   User      @relation("UserTokens", fields: [createdById], references: [id])
  createdById String
  // Map
  map         Map       @relation("MapTokens", fields: [mapId], references: [id])
  mapId       String
  // Character
  character   Character @relation("CharacterTokens", fields: [characterId], references: [id])
  characterId String
}
