version: '3.8'

services:
  #################
  ### Front-end ###
  #################

  client:
    container_name: client
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - nginx_network
    build:
      args:
        - HOST=${HOST}
        - NODE_ENV=${NODE_ENV}
        - JWT_ACCESS_TOKEN_EXPIRATION_TIME=${JWT_ACCESS_TOKEN_EXPIRATION_TIME}
        - SENTRY_ENABLED=${SENTRY_ENABLED}
        - SENTRY_DSN=${SENTRY_DSN}
    env_file:
      - ./.env

  ################
  ### Back-end ###
  ################

  server:
    container_name: server
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - nginx_network
      - server_network
    volumes:
      - ./data/tmp:/tmp/uploads
      - ./data/uploads:/uploads
    env_file:
      - ./.env

  ################
  ### Database ###
  ################

  postgres:
    container_name: postgres
    image: postgres:14-alpine
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - server_network
    volumes:
      - ./data/postgres:/var/lib/postgresql
    ports:
      - '5432:5432'
    env_file:
      - ./.env

  ######################
  ### Infrastructure ###
  ######################

  nginx:
    container_name: nginx
    image: nginx:alpine
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - nginx_network
    command: nginx -g 'daemon off;'
    volumes:
      - ./data/plugins:/plugins
      - ./data/uploads:/uploads
      - ./nginx:/etc/nginx/templates
    ports:
      - '4000:80'
    env_file:
      - ./.env

  redis:
    container_name: redis
    image: redis:6-alpine
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - server_network
    command: redis-server --requirepass ${REDIS_PASSWORD}

networks:
  server_network:
  nginx_network:
