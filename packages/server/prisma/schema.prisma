generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Setup {
  id        Int     @id @default(1)
  step      Int     @default(1)
  completed Boolean @default(false)
}

enum Role {
  USER
  ADMIN
}

model User {
  id                            String               @id @default(cuid())
  name                          String
  email                         String               @unique
  password                      String
  roles                         Role[]               @default([USER])
  refreshTokens                 RefreshToken[]       @relation("UserRefreshTokens")
  // DateTime
  createdAt                     DateTime             @default(now())
  updatedAt                     DateTime             @default(now()) @updatedAt
  // Maps
  maps                          Map[]                @relation("UserMaps")
  // Tokens
  tokens                        Token[]              @relation("UserTokens")
  // Media
  media                         Media[]              @relation("UserMedia")
  // Campaigns
  createdCampaigns              Campaign[]           @relation("UserCampaigns")
  playerCampaigns               Campaign[]           @relation("CampaignPlayers")
  // Player Characters
  createdPlayerCharacters       PlayerCharacter[]    @relation("CreatedPlayerCharacters")
  controlledPlayerCharacters    PlayerCharacter[]    @relation("ControlledPlayerCharacters")
  // Non Player Characters
  createdNonPlayerCharacters    NonPlayerCharacter[] @relation("CreatedNonPlayerCharacters")
  controlledNonPlayerCharacters NonPlayerCharacter[] @relation("ControlledNonPlayerCharacters")
}

model RefreshToken {
  id        String   @id @default(cuid())
  value     String   @unique
  // DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  // User
  user      User     @relation("UserRefreshTokens", fields: [userId], references: [id])
  userId    String
}

model Campaign {
  id                  String               @id @default(cuid())
  name                String
  // DateTime
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @default(now()) @updatedAt
  // Maps
  maps                Map[]                @relation("CampaignMaps")
  // Players
  players             User[]               @relation("CampaignPlayers")
  // Player Characters
  playerCharacters    PlayerCharacter[]    @relation("CampaignPlayerCharacters")
  // Non Player Characters
  nonPlayerCharacters NonPlayerCharacter[] @relation("CampaignNonPlayerCharacters")
  // Created by
  createdBy           User                 @relation("UserCampaigns", fields: [createdById], references: [id])
  createdById         String
}

model Map {
  id          String   @id @default(cuid())
  name        String
  // DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  // Tokens
  tokens      Token[]  @relation("MapTokens")
  // Media
  media       Media?   @relation("MapMedia", fields: [mediaId], references: [id])
  mediaId     String?
  // Campaign
  campaign    Campaign @relation("CampaignMaps", fields: [campaignId], references: [id])
  campaignId  String
  // Created by
  createdBy   User     @relation("UserMaps", fields: [createdById], references: [id])
  createdById String
}

model Movement {
  id                   String              @id @default(cuid())
  burrow               Int                 @default(0)
  climb                Int                 @default(0)
  fly                  Int                 @default(0)
  hover                Boolean             @default(false)
  swim                 Int                 @default(0)
  walk                 Int                 @default(30)
  // Player Character
  playerCharacter      PlayerCharacter?    @relation("PlayerCharacterMovement", fields: [playerCharacterId], references: [id])
  playerCharacterId    String?             @unique
  // Non Player Character
  nonPlayerCharacter   NonPlayerCharacter? @relation("NonPlayerCharacterMovement", fields: [nonPlayerCharacterId], references: [id])
  nonPlayerCharacterId String?             @unique
}

model HitPoints {
  id                   String              @id @default(cuid())
  current              Int                 @default(10)
  maximum              Int                 @default(10)
  temporary            Int                 @default(0)
  formula              String              @default("1d10")
  // Player Character
  playerCharacter      PlayerCharacter?    @relation("PlayerCharacterHitPoints", fields: [playerCharacterId], references: [id])
  playerCharacterId    String?             @unique
  // Non Player Character
  nonPlayerCharacter   NonPlayerCharacter? @relation("NonPlayerCharacterHitPoints", fields: [nonPlayerCharacterId], references: [id])
  nonPlayerCharacterId String?             @unique
}

model ArmorClass {
  id                   String              @id @default(cuid())
  value                Int                 @default(10)
  description          String              @default("")
  // Player Character
  playerCharacter      PlayerCharacter?    @relation("PlayerCharacterArmorClass", fields: [playerCharacterId], references: [id])
  playerCharacterId    String?             @unique
  // Non Player Character
  nonPlayerCharacter   NonPlayerCharacter? @relation("NonPlayerCharacterArmorClass", fields: [nonPlayerCharacterId], references: [id])
  nonPlayerCharacterId String?             @unique
}

model Senses {
  id                   String              @id @default(cuid())
  blindsight           Int                 @default(0)
  darkvision           Int                 @default(0)
  tremorsense          Int                 @default(0)
  truesight            Int                 @default(0)
  // Player Character
  playerCharacter      PlayerCharacter?    @relation("PlayerCharacterSenses", fields: [playerCharacterId], references: [id])
  playerCharacterId    String?             @unique
  // Non Player Character
  nonPlayerCharacter   NonPlayerCharacter? @relation("NonPlayerCharacterSenses", fields: [nonPlayerCharacterId], references: [id])
  nonPlayerCharacterId String?             @unique
}

model Ability {
  id                   String              @id @default(cuid())
  name                 String
  shortName            String
  score                Int                 @default(10)
  modifier             Int                 @default(0)
  save                 Int                 @default(0)
  // Skills
  skills               Skill[]             @relation("AbilitySkills")
  // Player Character
  playerCharacter      PlayerCharacter?    @relation("PlayerCharacterAbilities", fields: [playerCharacterId], references: [id])
  playerCharacterId    String?
  // Non Player Character
  nonPlayerCharacter   NonPlayerCharacter? @relation("NonPlayerCharacterAbilities", fields: [nonPlayerCharacterId], references: [id])
  nonPlayerCharacterId String?
}

model Skill {
  id                   String              @id @default(cuid())
  name                 String
  level                Int                 @default(0)
  bonus                Int                 @default(0)
  // Ability
  ability              Ability             @relation("AbilitySkills", fields: [abilityId], references: [id])
  abilityId            String
  // Player Character
  playerCharacter      PlayerCharacter?    @relation("PlayerCharacterSkills", fields: [playerCharacterId], references: [id])
  playerCharacterId    String?
  // Non Player Character
  nonPlayerCharacter   NonPlayerCharacter? @relation("NonPlayerCharacterSkills", fields: [nonPlayerCharacterId], references: [id])
  nonPlayerCharacterId String?
}

model Currencies {
  id                String          @id @default(cuid())
  copper            Int             @default(0)
  silver            Int             @default(0)
  gold              Int             @default(0)
  electrum          Int             @default(0)
  platinum          Int             @default(0)
  // Player Character
  playerCharacter   PlayerCharacter @relation("PlayerCharacterCurrencies", fields: [playerCharacterId], references: [id])
  playerCharacterId String          @unique
}

model PlayerCharacter {
  id           String      @id @default(cuid())
  name         String
  size         String      @default("Medium")
  alignment    String      @default("Neutral")
  // DateTime
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @default(now()) @updatedAt
  // Armor Class
  armorClass   ArmorClass? @relation("PlayerCharacterArmorClass")
  // Hit Points
  hitPoints    HitPoints?  @relation("PlayerCharacterHitPoints")
  // Movement
  movement     Movement?   @relation("PlayerCharacterMovement")
  // Senses
  senses       Senses?     @relation("PlayerCharacterSenses")
  // Currencies
  currencies   Currencies? @relation("PlayerCharacterCurrencies")
  // Abilities
  abilities    Ability[]   @relation("PlayerCharacterAbilities")
  // Skills
  skills       Skill[]     @relation("PlayerCharacterSkills")
  // Tokens
  tokens       Token[]     @relation("PlayerCharacterTokens")
  // Media
  media        Media?      @relation("PlayerCharacterMedia", fields: [mediaId], references: [id])
  mediaId      String?
  // Created by
  createdBy    User        @relation("CreatedPlayerCharacters", fields: [createdById], references: [id])
  createdById  String
  // Controlled by
  controlledBy User[]      @relation("ControlledPlayerCharacters")
  // Campaign
  campaign     Campaign    @relation("CampaignPlayerCharacters", fields: [campaignId], references: [id])
  campaignId   String
}

model NonPlayerCharacter {
  id           String      @id @default(cuid())
  name         String
  size         String      @default("Medium")
  alignment    String      @default("Neutral")
  // DateTime
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @default(now()) @updatedAt
  // Armor Class
  armorClass   ArmorClass? @relation("NonPlayerCharacterArmorClass")
  // Hit Points
  hitPoints    HitPoints?  @relation("NonPlayerCharacterHitPoints")
  // Movement
  movement     Movement?   @relation("NonPlayerCharacterMovement")
  // Senses
  senses       Senses?     @relation("NonPlayerCharacterSenses")
  // Abilities
  abilities    Ability[]   @relation("NonPlayerCharacterAbilities")
  // Skills
  skills       Skill[]     @relation("NonPlayerCharacterSkills")
  // Tokens
  tokens       Token[]     @relation("NonPlayerCharacterTokens")
  // Media
  media        Media?      @relation("NonPlayerCharacterMedia", fields: [mediaId], references: [id])
  mediaId      String?
  // Created by
  createdBy    User        @relation("CreatedNonPlayerCharacters", fields: [createdById], references: [id])
  createdById  String
  // Controlled by
  controlledBy User[]      @relation("ControlledNonPlayerCharacters")
  // Campaign
  campaign     Campaign    @relation("CampaignNonPlayerCharacters", fields: [campaignId], references: [id])
  campaignId   String
}

model Media {
  id                  String               @id @default(cuid())
  url                 String
  thumbnailUrl        String
  width               Int
  height              Int
  size                Int
  format              String
  extension           String
  // DateTime
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @default(now()) @updatedAt
  // Maps
  maps                Map[]                @relation("MapMedia")
  // Player Characters
  playerCharacters    PlayerCharacter[]    @relation("PlayerCharacterMedia")
  // Non Player Characters
  nonPlayerCharacters NonPlayerCharacter[] @relation("NonPlayerCharacterMedia")
  // Created by
  createdBy           User                 @relation("UserMedia", fields: [createdById], references: [id])
  createdById         String
}

model Token {
  id                   String              @id @default(cuid())
  width                Int
  height               Int
  x                    Int
  y                    Int
  // DateTime
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @default(now()) @updatedAt
  // User
  createdBy            User                @relation("UserTokens", fields: [createdById], references: [id])
  createdById          String
  // Map
  map                  Map                 @relation("MapTokens", fields: [mapId], references: [id])
  mapId                String
  // Player Character
  playerCharacter      PlayerCharacter?    @relation("PlayerCharacterTokens", fields: [playerCharacterId], references: [id])
  playerCharacterId    String?
  // Non Player Character
  nonPlayerCharacter   NonPlayerCharacter? @relation("NonPlayerCharacterTokens", fields: [nonPlayerCharacterId], references: [id])
  nonPlayerCharacterId String?
}
