version: '3.7'
services:
  #################
  ### Front-end ###
  #################

  client:
    container_name: client
    platform: linux/amd64
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - caddy
    env_file:
      - ./.env
    build:
      args:
        - BASE_PATH=${BASE_PATH}
        - PORT=${PORT}
        - TUS_URL=${TUS_URL}
        - JWT_ACCESS_TOKEN_EXPIRATION_TIME=${JWT_ACCESS_TOKEN_EXPIRATION_TIME}
        - SENTRY_ENABLED=${SENTRY_ENABLED}
        - SENTRY_DSN=${SENTRY_DSN}

  ################
  ### Back-end ###
  ################

  server:
    container_name: server
    platform: linux/amd64
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - caddy
      - db
      - backend
    volumes:
      - tmp:/tmp
      - uploads:/uploads
    env_file:
      - ./.env

  ################
  ### Database ###
  ################

  postgres:
    container_name: postgres
    image: postgres:14-alpine
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - db
    volumes:
      - postgres:/var/lib/postgresql
    env_file:
      - ./.env

  ######################
  ### Infrastructure ###
  ######################

  caddy:
    container_name: caddy
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - caddy
    volumes:
      - caddy-config:/config
      - caddy-data:/data
      - caddy-srv:/srv
      - caddy:/data/caddy
      - plugins:/plugins
      - uploads:/uploads
    env_file:
      - ./.env
    # stdin_open: true
    # tty: true

  redis:
    container_name: redis
    image: redis:6-alpine
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - backend
    command: redis-server --requirepass ${REDIS_PASSWORD}

  tus:
    container_name: tus
    image: tusproject/tusd
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - caddy
    command: -behind-proxy -upload-dir /tmp/uploads -base-path /tus/files/
    volumes:
      - tmp:/tmp

networks:
  caddy:
  db:
  backend:

volumes:
  # Docker volumes
  caddy-config:
  caddy-data:
  # Mutagen volumes
  caddy-srv:
  caddy:
  plugins:
  postgres:
  tmp:
  uploads:

x-mutagen:
  sync:
    defaults:
      ignore:
        vcs: true

    caddy-srv:
      alpha: './caddy/srv'
      beta: 'volume://caddy-srv'

    caddy:
      alpha: './data/caddy'
      beta: 'volume://caddy'

    plugins:
      alpha: './data/plugins'
      beta: 'volume://plugins'

    postgres:
      alpha: './data/postgres'
      beta: 'volume://postgres'

    tmp:
      alpha: './data/tmp'
      beta: 'volume://tmp'

    uploads:
      alpha: './data/uploads'
      beta: 'volume://uploads'

  forward:
    caddy:
      source: 'tcp::${PORT}'
      destination: 'network://caddy:tcp:caddy:${PORT}'

    postgres:
      source: 'tcp::5432'
      destination: 'network://db:tcp:postgres:5432'

    redis:
      source: 'tcp::6379'
      destination: 'network://backend:tcp:redis:6379'
